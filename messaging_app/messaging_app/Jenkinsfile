pipeline {
    agent any
    
    environment {
        PROJECT_DIR = 'messaging_app'
        PYTHON = 'python3'
        PIP = 'pip3'
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'  // Update this
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKER_CREDS = credentials('dockerhub-creds')  // Create in Jenkins credentials
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-ssh-key',
                    url: 'https://github.com/Gatlat-cs2023/alx-backend-python'
            }
        }    
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'pip3 install --upgrade pip'
                    sh 'pip3 install -r messaging_app/requirements.txt'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir(env.PROJECT_DIR) {  // Added directory scope
                    sh "${PYTHON} -m pytest --junitxml=test-results.xml"
                }
            }
            post {
                always {
                    junit "${env.PROJECT_DIR}/test-results.xml"  // Updated path
                }
            }
        }
        
        // New Docker stages
        stage('Build Docker Image') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                dir(env.PROJECT_DIR) {
                    script {
                        docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}")
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_CREDS) {
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed - cleaning up'
        }
        success {
            echo "Pipeline succeeded! Docker image: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}